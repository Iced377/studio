'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '@/components/auth/AuthProvider';
import Navbar from '@/components/shared/Navbar';
import { Loader2, Lightbulb, AlertTriangle } from 'lucide-react';
import { Card, CardContent, CardHeader, CardDescription } from '@/components/ui/card'; // Removed CardTitle as it was not used
import type { AIInsight } from '@/types';
import { format } from 'date-fns';
import { db } from '@/config/firebase'; // Added Firestore db import
import {
  collection,
  query,
  orderBy,
  getDocs,
  Timestamp
} from 'firebase/firestore'; // Added Firestore functions
import { cn } from '@/lib/utils'; // Added cn import

export default function AIInsightsPage() {
  const { user: authUser, loading: authLoading } = useAuth();
  const [insights, setInsights] = useState<AIInsight[]>([]);
  const [isLoadingData, setIsLoadingData] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (authLoading) return;
    if (!authUser) {
      setIsLoadingData(false);
      setError("Please log in to view your AI Insights."); // Provide an error message or handle redirect
      return;
    }

    const fetchInsights = async () => {
      setIsLoadingData(true);
      setError(null);
      try {
        const insightsColRef = collection(db, 'users', authUser.uid, 'aiInsights');
        const q = query(insightsColRef, orderBy('timestamp', 'desc')); // Fetch newest first
        
        const querySnapshot = await getDocs(q);
        const fetchedInsights: AIInsight[] = querySnapshot.docs.map(docSnap => {
          const data = docSnap.data();
          return {
            id: docSnap.id,
            text: data.text,
            timestamp: (data.timestamp as Timestamp)?.toDate() || new Date(), // Handle server timestamp
            read: data.read,
          } as AIInsight;
        });
        setInsights(fetchedInsights);
      } catch (err: any) {
        console.error("Error fetching AI insights for page:", err);
        setError("Could not load your AI insights. Please try again later.");
      } finally {
        setIsLoadingData(false);
      }
    };

    fetchInsights();
  }, [authUser, authLoading]);

  if (authLoading || isLoadingData) {
    return (
      <div className="flex flex-col min-h-screen">
        <Navbar />
        <div className="flex-grow flex items-center justify-center">
          <Loader2 className="h-12 w-12 animate-spin text-primary" />
          <p className="ml-4 text-lg text-foreground">Loading AI Insights...</p>
        </div>
      </div>
    );
  }

  // Error state now covers non-logged in users as well, for a consistent message display
  if (error) {
    return (
      <div className="flex flex-col min-h-screen">
        <Navbar />
        <div className="flex-grow flex flex-col items-center justify-center text-center p-8">
          <AlertTriangle className="h-12 w-12 text-destructive mb-4" />
          <h2 className="text-2xl font-semibold mb-2 text-foreground">Insights Unavailable</h2>
          <p className="text-muted-foreground">{error}</p>
        </div>
      </div>
    );
  }
  
  return (
    <div className="flex flex-col min-h-screen bg-background">
      <Navbar />
      <main className="flex-grow container mx-auto px-4 py-8">
        <div className="flex items-center mb-6">
          <Lightbulb className="h-8 w-8 text-primary mr-3" />
          <h1 className="text-3xl font-bold text-foreground">AI Insights History</h1>
        </div>
        
        {insights.length === 0 ? (
          <div className="text-center text-muted-foreground py-10">
            <Lightbulb className="h-16 w-16 mx-auto mb-4 opacity-50" />
            <p className="text-xl">No AI insights recorded yet.</p>
            <p>As you use the app, helpful tips and observations generated by our AI will appear here for your review.</p>
          </div>
        ) : (
          <div className="space-y-4">
            {insights.map((insight) => (
              <Card key={insight.id} className={cn(
                'bg-card shadow-md border-border transition-opacity',
                insight.read ? 'opacity-70 hover:opacity-90' : 'opacity-100'
              )}>
                <CardHeader className="pb-3 flex flex-row justify-between items-center">
                  <CardDescription className="text-xs text-muted-foreground">
                    {format(new Date(insight.timestamp), 'PPP p')} {/* e.g., Jun 21, 2024, 3:30 PM */}
                  </CardDescription>
                  {insight.read && (
                    <span className="text-xs font-medium text-muted-foreground/80 px-2 py-0.5 rounded-full bg-muted">Read</span>
                  )}
                </CardHeader>
                <CardContent>
                  <p className="text-foreground">{insight.text}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </main>
    </div>
  );
}
